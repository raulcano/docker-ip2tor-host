version: '3'
services:

  ip2tor-host:
    build:
      context: .
      dockerfile: .docker/Dockerfile
      args:
        HOST_IP: ${IP2TOR_HOST_IP}
    container_name: ip2tor-host
    volumes:
      - .:/home/ip2tor
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    network_mode: "host"
  tos:
    build:
      context: .
      dockerfile: .docker/tos/tos.Dockerfile
    container_name: ip2tor-host-tos
    ports:
      - ${TOS_PORT}:${TOS_PORT}
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - hostnet
  cron:
    build:
      context: .
      dockerfile: .docker/cron/cron.Dockerfile
      args:
        HOST_IP: ${IP2TOR_HOST_IP}
    container_name: ip2tor-host-cron
    volumes:
      - .:/home/ip2tor
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - hostnet
  nginx:
    image: nginx
    container_name: ip2tor-host-nginx
    hostname: nginx
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    ports:
      - ${NGINX_HTTP_PORT}:${NGINX_HTTP_PORT}
      - ${NGINX_HTTPS_PORT}:${NGINX_HTTPS_PORT}
    volumes:
      - .docker/nginx:/etc/nginx/templates
      - ./logs/nginx:/var/log/nginx
      - ./ssl/${NOSTR_DOMAIN}:/etc/nginx/ssl/${NOSTR_DOMAIN}
    environment:
      - HTTP_SERVER_PORT=${HTTP_SERVER_PORT}
      - NGINX_HTTP_PORT=${NGINX_HTTP_PORT}
      - NGINX_HTTPS_PORT=${NGINX_HTTPS_PORT}
      - NOSTR_DOMAIN=${NOSTR_DOMAIN}
      - NOSTR_SHOP_URL=${NOSTR_SHOP_URL}
    networks:
      - hostnet
  key-convertr:
    build:
      context: .
      dockerfile: .docker/key-convertr/docker/Dockerfile
    container_name: ip2tor-host-key-convertr
    restart: on-failure
    networks:
      - hostnet
  
  ##################################################
  # BANDWIDTH MONITORING SERVICES
  ##################################################
  telegraf:
    image: telegraf:1.27
    container_name: ip2tor-host-telegraf
    hostname: telegraf
    volumes:
      - .docker/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - .:/home/ip2tor
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    environment:
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
      - DOCKER_INFLUXDB_INIT_ORG=${DOCKER_INFLUXDB_INIT_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET}
    depends_on:
      - influxdb
    network_mode: "host"
  influxdb:
    image: influxdb:2.7-alpine
    container_name: ip2tor-host-influxdb
    hostname: influxdb
    volumes:
      - .docker/influxdbv2:/var/lib/influxdb2:rw
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${DOCKER_INFLUXDB_INIT_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${DOCKER_INFLUXDB_INIT_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${DOCKER_INFLUXDB_INIT_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET}
      - DOCKER_INFLUXDB_INIT_RETENTION=${DOCKER_INFLUXDB_INIT_RETENTION}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
    ports:
      - "8086:8086"
networks:
  hostnet:
    driver: bridge